{
  "Resources": {
    "DMSLabVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabSourceDB"
          }
        ]
      }
    },
    "RDSSubNet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "us-east-1d",
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabRDS1"
          }
        ]
      }
    },
    "EC2SubNet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "us-east-1c",
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabEC2"
          }
        ]
      }
    },
    "RDSSubNet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "us-east-1b",
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabRDS2"
          }
        ]
      }
    },
    "igw0887475a258f00277": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabIGW"
          }
        ]
      }
    },
    "dopt1cc25278": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "ec2.internal",
        "DomainNameServers": ["AmazonProvidedDNS"]
      }
    },
    "rtb0c3fae104a7b64456": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabRT"
          }
        ]
      }
    },
    "instancei0f63b887480639040": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "rdsdmslabdb",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "EbsOptimized": "true",
        "ImageId": "ami-04681a1dbd79675a5",
        "InstanceType": "t3.2xlarge",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"//\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--//\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                "\n",
                "#cloud-config\n",
                "cloud_final_modules:\n",
                "- [scripts-user, always]\n",
                "\n",
                "--//\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
                "\n",
                "#!/bin/bash -xe\n",
                "yum install -y postgresql\n",
                "yum install -y git\n",
                "yum update -y\n",
                "cd /home/ec2-user\n",
                "DIR=\"aws-database-migration-samples\"\n",
                "if [ ! -d \"$DIR\" ]; then\n",
                "git clone https://github.com/aws-samples/aws-database-migration-samples.git\n",
                "fi\n",
                "cd aws-database-migration-samples/PostgreSQL/sampledb/v1/\n",
                "export PGPASSWORD=master123\n",
                "export ENDPOINT=",
                { "Fn::GetAtt": ["rdsdmslabdb", "Endpoint.Address"] },
                "\n",
                "nohup psql --host=${ENDPOINT} --port=5432 --dbname=sportstickets --username=master -f install-postgresql.sql\n",
                "--//\n",
                "\n"
              ]
            ]
          }
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabEC2"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "EC2SubNet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.40",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgDMSLabSG"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
    "rdsdmslabdb": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "500",
        "AllowMajorVersionUpgrade": "false",
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": "db.t2.xlarge",
        "DBInstanceIdentifier": "dmslabinstance",
        "Port": "5432",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "BackupRetentionPeriod": "7",
        "MasterUsername": "master",
        "MasterUserPassword": "master123",
        "PreferredBackupWindow": "04:00-04:30",
        "PreferredMaintenanceWindow": "sun:05:20-sun:05:50",
        "DBName": "sportstickets",
        "Engine": "postgres",
        "EngineVersion": "11.5",
        "LicenseModel": "postgresql-license",
        "DBSubnetGroupName": {
          "Ref": "dbsubnetdefaultDMSLabVPC"
        },
        "DBParameterGroupName": {
          "Ref": "dbpgdataengdmsgroup"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "sgrdslaunchwizard2"
          }
        ],
        "Tags": [
          {
            "Key": "workload-type",
            "Value": "other"
          }
        ]
      }
    },
    "dbsubnetdefaultDMSLabVPC": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Created from the RDS Management Console",
        "SubnetIds": [
          {
            "Ref": "RDSSubNet"
          },
          {
            "Ref": "EC2SubNet"
          },
          {
            "Ref": "RDSSubNet2"
          }
        ]
      }
    },
    "dbpgdataengdmsgroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "Parameter for Ticket Database",
        "Family": "postgres11",
        "Parameters": {
          "rds.logical_replication": "1",
          "wal_sender_timeout": "0",
          "max_wal_senders": "20"
        }
      }
    },
    "sgDMSLabSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EC2 Security Group",
        "VpcId": {
          "Ref": "DMSLabVPC"
        }
      }
    },
    "sgrdslaunchwizard2": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RDS Security Group",
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLabRDS-SG"
          }
        ]
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "InternetGatewayId": {
          "Ref": "igw0887475a258f00277"
        }
      }
    },
    "subnetroute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb0c3fae104a7b64456"
        },
        "SubnetId": {
          "Ref": "RDSSubNet2"
        }
      }
    },
    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb0c3fae104a7b64456"
        },
        "SubnetId": {
          "Ref": "RDSSubNet"
        }
      }
    },
    "subnetroute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb0c3fae104a7b64456"
        },
        "SubnetId": {
          "Ref": "EC2SubNet"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb0c3fae104a7b64456"
        },
        "GatewayId": {
          "Ref": "igw0887475a258f00277"
        }
      },
      "DependsOn": "gw1"
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "DMSLabVPC"
        },
        "DhcpOptionsId": {
          "Ref": "dopt1cc25278"
        }
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgDMSLabSG"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgrdslaunchwizard2"
        },
        "IpProtocol": "tcp",
        "FromPort": "5432",
        "ToPort": "5432",
        "SourceSecurityGroupId": {
          "Ref": "sgDMSLabSG"
        },
        "SourceSecurityGroupOwnerId": "649225637812"
      }
    },
    "ingress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgrdslaunchwizard2"
        },
        "IpProtocol": "tcp",
        "FromPort": "5432",
        "ToPort": "5432",
        "CidrIp": "72.21.196.67/32"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgDMSLabSG"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress2": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgrdslaunchwizard2"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "GenerateCDCData": {
      "DependsOn": ["rdsdmslabdb", "LambdaExecutionRole"],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-dataengineering-day.workshop.aws",
          "S3Key": "dmslambda.zip"
        },
        "Description": "Function to generate CDC data",
        "FunctionName": "GenerateCDCData",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "HOST": { "Fn::GetAtt": ["rdsdmslabdb", "Endpoint.Address"] }
          }
        },
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "VpcConfig": {
          "SecurityGroupIds": [{ "Fn::GetAtt": ["sgDMSLabSG", "GroupId"] }],
          "SubnetIds": [{ "Ref": "EC2SubNet" }]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DMSlabRDSAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "RDSAccess",
                  "Effect": "Allow",
                  "Action": [
                    "rds:*",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "dmslabstudentvpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "InstanceTenancy": "default",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "dmslstudv1"
          }
        ]
      }
    },
    "dmslabstudentsubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/26",
        "AvailabilityZone": "us-east-1a",
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_subnet"
          }
        ],
        "MapPublicIpOnLaunch": false
      }
    },
    "dmslabstudentsubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.128/26",
        "AvailabilityZone": "us-east-1b",
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_subnet"
          }
        ],
        "MapPublicIpOnLaunch": false
      }
    },
    "dmslabstudentsubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.64/26",
        "AvailabilityZone": "us-east-1c",
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public_subnet"
          }
        ],
        "MapPublicIpOnLaunch": true
      }
    },
    "dmslabstudentigw": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DMSLab-IGW"
          }
        ]
      }
    },
    "NatPublicIP": {
      "DependsOn": "dmslabstudentvpc",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatGateway": {
      "DependsOn": ["NatPublicIP", "studentgw1"],
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": ["NatPublicIP", "AllocationId"] },
        "SubnetId": { "Ref": "dmslabstudentsubnet3" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "NatGateway"
          }
        ]
      }
    },
    "dopt1b68e47c": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "ec2.internal",
        "DomainNameServers": ["AmazonProvidedDNS"]
      }
    },
    "dmslabstudentacl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        }
      }
    },
    "dmslabstudentrtable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Nane",
            "Value": "PrivateRouteTable"
          }
        ]
      }
    },
    "dmslabstudentrtable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "PublicRouteTable"
          }
        ]
      }
    },
    "sgdefault": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "default VPC security group",
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        }
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100,
        "NetworkAclId": {
          "Ref": "dmslabstudentacl"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100,
        "NetworkAclId": {
          "Ref": "dmslabstudentacl"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "dmslabstudentacl"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet3"
        }
      }
    },
    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "dmslabstudentacl"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet1"
        }
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "dmslabstudentacl"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet2"
        }
      }
    },
    "studentgw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "InternetGatewayId": {
          "Ref": "dmslabstudentigw"
        }
      }
    },
    "studentsubnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "dmslabstudentrtable1"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet1"
        }
      }
    },
    "studentsubnetroute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "dmslabstudentrtable1"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet2"
        }
      }
    },
    "studentsubnetroute4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "dmslabstudentrtable2"
        },
        "SubnetId": {
          "Ref": "dmslabstudentsubnet3"
        }
      }
    },
    "studentroute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "dmslabstudentrtable1"
        },
        "NatGatewayId": {
          "Ref": "NatGateway"
        }
      }
    },
    "studentroute2": {
      "DependsOn": "studentgw1",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "dmslabstudentrtable2"
        },
        "GatewayId": {
          "Ref": "dmslabstudentigw"
        }
      }
    },
    "studentdchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "dmslabstudentvpc"
        },
        "DhcpOptionsId": {
          "Ref": "dopt1b68e47c"
        }
      }
    },
    "studentingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgdefault"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "sgdefault"
        },
        "SourceSecurityGroupOwnerId": "105763911922"
      }
    },
    "studentegress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgdefault"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "DMSLabS3Bucket": {
      "Type": "AWS::S3::Bucket"
    },
    "DMSLabS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "DMSLabS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": ["DMSLabS3Bucket", "Arn"]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": ["s3:ListBucket"],
              "Resource": [
                {
                  "Fn::GetAtt": ["DMSLabS3Bucket", "Arn"]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "DMSLabRoleS3"
          },
          {
            "Ref": "GlueLabRole"
          }
        ]
      }
    },
    "DMSLabRoleS3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["dms.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/"
      }
    },
    "GlueLabRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["glue.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/service-role/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ]
      }
    },
    "DMSCloudWatchLogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "dms-cloudwatch-logs-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["dms.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole"
        ]
      }
    },
    "LakeFormationWorkflowRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["glue.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DatalakeDataAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Lakeformation",
                  "Effect": "Allow",
                  "Action": [
                    "lakeformation:GetDataAccess",
                    "lakeformation:GrantPermissions"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "DatalakePassRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PassRolePermissions",
                  "Effect": "Allow",
                  "Action": ["iam:PassRole"],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole",
          "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess"
        ]
      }
    },
    "S3BucketWorkgroupA": {
      "Type": "AWS::S3::Bucket"
    },
    "S3BucketWorkgroupB": {
      "Type": "AWS::S3::Bucket"
    },
    "BusinessAnalystUserPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Policy for providing required access to the business analyst user",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": "athena:ListWorkGroups",
              "Resource": "*"
            },
            {
              "Sid": "VisualEditor1",
              "Effect": "Allow",
              "Action": [
                "s3:ListBucketMultipartUploads",
                "athena:StartQueryExecution",
                "athena:GetQueryResultsStream",
                "athena:GetQueryResults",
                "s3:CreateBucket",
                "s3:ListBucket",
                "athena:DeleteNamedQuery",
                "athena:GetNamedQuery",
                "athena:ListTagsForResource",
                "athena:ListQueryExecutions",
                "s3:ListMultipartUploadParts",
                "athena:ListNamedQueries",
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "athena:GetWorkGroup",
                "athena:CreateNamedQuery",
                "s3:AbortMultipartUpload",
                "athena:StopQueryExecution",
                "athena:GetQueryExecution",
                "athena:BatchGetNamedQuery",
                "s3:GetBucketLocation",
                "athena:BatchGetQueryExecution",
                "lakeformation:GetDataAccess"
              ],
              "Resource": "*"
            },
            {
              "Sid": "VisualEditor2",
              "Effect": "Allow",
              "Action": "athena:GetQueryExecutions",
              "Resource": "*"
            },
            {
              "Sid": "VisualEditor3",
              "Effect": "Allow",
              "Action": ["glue:Get*", "glue:GetTable"],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "WorkgroupManagerUserPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Policy for providing only manager access to workgroup manager user for WorkgroupA and WorkgroupB",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["athena:ListWorkGroups"],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucketMultipartUploads",
                "s3:CreateBucket",
                "s3:ListBucket",
                "s3:ListMultipartUploadParts",
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    ["arn:aws:s3:::", { "Ref": "S3BucketWorkgroupA" }]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::Join": [
                          "",
                          ["arn:aws:s3:::", { "Ref": "S3BucketWorkgroupA" }]
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    ["arn:aws:s3:::", { "Ref": "S3BucketWorkgroupB" }]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::Join": [
                          "",
                          ["arn:aws:s3:::", { "Ref": "S3BucketWorkgroupB" }]
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    ["arn:aws:s3:::", { "Ref": "DMSLabS3Bucket" }]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::Join": [
                          "",
                          ["arn:aws:s3:::", { "Ref": "DMSLabS3Bucket" }]
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:athena",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "workgroup/workgroupA"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:athena",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "workgroup/workgroupB"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "athena:DeleteWorkGroup",
                "athena:UpdateWorkGroup",
                "athena:GetWorkGroup",
                "athena:CreateWorkGroup",
                "athena:GetExecutionEngine",
                "athena:GetExecutionEngines",
                "athena:GetNamespace",
                "athena:GetCatalogs",
                "athena:GetNamespaces",
                "athena:GetTables",
                "athena:GetTable"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:athena",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "workgroup/workgroupA"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:athena",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "workgroup/workgroupB"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },

    "BusinessAnalystUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "ManagedPolicyArns": [{ "Ref": "BusinessAnalystUserPolicy" }],
        "LoginProfile": {
          "Password": "master123"
        }
      }
    },
    "WorkgroupManagerUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "ManagedPolicyArns": [{ "Ref": "WorkgroupManagerUserPolicy" }],
        "LoginProfile": {
          "Password": "master123"
        }
      }
    }
  },
  "Outputs": {
    "DMSInstanceEndpoint": {
      "Description": "DMS Instance Endpoint",
      "Value": {
        "Fn::GetAtt": ["rdsdmslabdb", "Endpoint.Address"]
      }
    },
    "CDCFuntion": {
      "Description": "CDC Function",
      "Value": { "Fn::GetAtt": ["GenerateCDCData", "Arn"] }
    },
    "DMSLabRoleS3": {
      "Description": "The DMS serivce role",
      "Value": { "Fn::GetAtt": ["DMSLabRoleS3", "Arn"] }
    },
    "GlueLabRole": {
      "Description": "The Glue service role",
      "Value": {
        "Ref": "GlueLabRole"
      }
    },
    "BucketName": {
      "Description": "S3 Bucket that was created",
      "Value": {
        "Ref": "DMSLabS3Bucket"
      }
    },
    "S3BucketWorkgroupA": {
      "Description": "S3 Bucket for storing workgroup A results",
      "Value": { "Ref": "S3BucketWorkgroupA" }
    },
    "S3BucketWorkgroupB": {
      "Description": "S3 bucket for storing workgroup B results",
      "Value": { "Ref": "S3BucketWorkgroupB" }
    },
    "BusinessAnalystUser": {
      "Description": "business_analyst_user for Workgroup A",
      "Value": { "Ref": "BusinessAnalystUser" }
    },
    "WorkgroupManagerUser": {
      "Description": "workgroup_manager_user for access to Workgroup A and Workgroup B",
      "Value": { "Ref": "WorkgroupManagerUser" }
    },
    "LakeFormationRole": {
      "Description": "Lake Formation IAM role",
      "Value": { "Ref": "LakeFormationWorkflowRole" }
    }
  },
  "Description": "DMS Lab Instructor account",
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "a79fb943-c167-4e59-8eda-911d4acc331f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 810,
          "y": 390
        },
        "z": 1,
        "embeds": []
      }
    }
  }
}
